{"ast":null,"code":"var _jsxFileName = \"/Users/shalks/Documents/dev/alphafx-csv-upload/src/Importer.js\";\nimport { Importer, ImporterField } from 'react-csv-importer';\n\n// include the widget CSS file whichever way your bundler supports it\nimport 'react-csv-importer/dist/index.css';\n\n// in your component code:\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*#__PURE__*/_jsxDEV(Importer, {\n  assumeNoHeaders: false // optional, keeps \"data has headers\" checkbox off by default\n  ,\n  restartable: false // optional, lets user choose to upload another file when import is complete\n  ,\n  onStart: _ref => {\n    let {\n      file,\n      preview,\n      fields,\n      columnFields\n    } = _ref;\n    // optional, invoked when user has mapped columns and started import\n    prepMyAppForIncomingData();\n  },\n  processChunk: async (rows, _ref2) => {\n    let {\n      startIndex\n    } = _ref2;\n    // required, may be called several times\n    // receives a list of parsed objects based on defined fields and user column mapping;\n    // (if this callback returns a promise, the widget will wait for it before parsing more data)\n    for (row of rows) {\n      await myAppMethod(row);\n    }\n  },\n  onComplete: _ref3 => {\n    let {\n      file,\n      preview,\n      fields,\n      columnFields\n    } = _ref3;\n    // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n    showMyAppToastNotification();\n  },\n  onClose: _ref4 => {\n    let {\n      file,\n      preview,\n      fields,\n      columnFields\n    } = _ref4;\n    // optional, if this is specified the user will see a \"Finish\" button after import is done,\n    // which will call this when clicked\n    goToMyAppNextPage();\n  }\n\n  // CSV options passed directly to PapaParse if specified:\n  // delimiter={...}\n  // newline={...}\n  // quoteChar={...}\n  // escapeChar={...}\n  // comments={...}\n  // skipEmptyLines={...}\n  // delimitersToGuess={...}\n  // chunkSize={...} // defaults to 10000\n  // encoding={...} // defaults to utf-8, see FileReader API\n  ,\n  children: [/*#__PURE__*/_jsxDEV(ImporterField, {\n    name: \"name\",\n    label: \"Name\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n    name: \"email\",\n    label: \"Email\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n    name: \"dob\",\n    label: \"Date of Birth\",\n    optional: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n    name: \"postalCode\",\n    label: \"Postal Code\",\n    optional: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 1\n}, this);","map":{"version":3,"names":["Importer","ImporterField","file","preview","fields","columnFields","prepMyAppForIncomingData","rows","startIndex","row","myAppMethod","showMyAppToastNotification","goToMyAppNextPage"],"sources":["/Users/shalks/Documents/dev/alphafx-csv-upload/src/Importer.js"],"sourcesContent":["import { Importer, ImporterField } from 'react-csv-importer';\n\n// include the widget CSS file whichever way your bundler supports it\nimport 'react-csv-importer/dist/index.css';\n\n// in your component code:\n<Importer\n  assumeNoHeaders={false} // optional, keeps \"data has headers\" checkbox off by default\n  restartable={false} // optional, lets user choose to upload another file when import is complete\n  onStart={({ file, preview, fields, columnFields }) => {\n    // optional, invoked when user has mapped columns and started import\n    prepMyAppForIncomingData();\n  }}\n  processChunk={async (rows, { startIndex }) => {\n    // required, may be called several times\n    // receives a list of parsed objects based on defined fields and user column mapping;\n    // (if this callback returns a promise, the widget will wait for it before parsing more data)\n    for (row of rows) {\n      await myAppMethod(row);\n    }\n  }}\n  onComplete={({ file, preview, fields, columnFields }) => {\n    // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n    showMyAppToastNotification();\n  }}\n  onClose={({ file, preview, fields, columnFields }) => {\n    // optional, if this is specified the user will see a \"Finish\" button after import is done,\n    // which will call this when clicked\n    goToMyAppNextPage();\n  }}\n\n  // CSV options passed directly to PapaParse if specified:\n  // delimiter={...}\n  // newline={...}\n  // quoteChar={...}\n  // escapeChar={...}\n  // comments={...}\n  // skipEmptyLines={...}\n  // delimitersToGuess={...}\n  // chunkSize={...} // defaults to 10000\n  // encoding={...} // defaults to utf-8, see FileReader API\n>\n  <ImporterField name=\"name\" label=\"Name\" />\n  <ImporterField name=\"email\" label=\"Email\" />\n  <ImporterField name=\"dob\" label=\"Date of Birth\" optional />\n  <ImporterField name=\"postalCode\" label=\"Postal Code\" optional />\n</Importer>;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,aAAa,QAAQ,oBAAoB;;AAE5D;AACA,OAAO,mCAAmC;;AAE1C;AAAA;AACA,qBAAC,QAAQ;EACP,eAAe,EAAE,KAAM,CAAC;EAAA;EACxB,WAAW,EAAE,KAAM,CAAC;EAAA;EACpB,OAAO,EAAE,QAA6C;IAAA,IAA5C;MAAEC,IAAI;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAa,CAAC;IAC/C;IACAC,wBAAwB,EAAE;EAC5B,CAAE;EACF,YAAY,EAAE,OAAOC,IAAI,YAAqB;IAAA,IAAnB;MAAEC;IAAW,CAAC;IACvC;IACA;IACA;IACA,KAAKC,GAAG,IAAIF,IAAI,EAAE;MAChB,MAAMG,WAAW,CAACD,GAAG,CAAC;IACxB;EACF,CAAE;EACF,UAAU,EAAE,SAA6C;IAAA,IAA5C;MAAEP,IAAI;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAa,CAAC;IAClD;IACAM,0BAA0B,EAAE;EAC9B,CAAE;EACF,OAAO,EAAE,SAA6C;IAAA,IAA5C;MAAET,IAAI;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAa,CAAC;IAC/C;IACA;IACAO,iBAAiB,EAAE;EACrB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;EAAA,wBAEA,QAAC,aAAa;IAAC,IAAI,EAAC,MAAM;IAAC,KAAK,EAAC;EAAM;IAAA;IAAA;IAAA;EAAA,QAAG,eAC1C,QAAC,aAAa;IAAC,IAAI,EAAC,OAAO;IAAC,KAAK,EAAC;EAAO;IAAA;IAAA;IAAA;EAAA,QAAG,eAC5C,QAAC,aAAa;IAAC,IAAI,EAAC,KAAK;IAAC,KAAK,EAAC,eAAe;IAAC,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QAAG,eAC3D,QAAC,aAAa;IAAC,IAAI,EAAC,YAAY;IAAC,KAAK,EAAC,aAAa;IAAC,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QAAG;AAAA;EAAA;EAAA;EAAA;AAAA,QACvD"},"metadata":{},"sourceType":"module"}