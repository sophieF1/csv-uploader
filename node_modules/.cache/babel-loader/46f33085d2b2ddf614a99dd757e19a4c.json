{"ast":null,"code":"var _jsxFileName = \"/Users/shalks/Documents/dev/alphafx-csv-upload/src/pages/ImportCSV.js\";\nimport React, { useState } from 'react';\nimport { fixture } from '../test/fixture.js';\nimport { Importer, ImporterField } from 'react-csv-importer';\n// const apiUrl = \"https://run.mocky.io/v3/cbca762d-3f84-4ae4-bb26-79fa774a6c72\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = \"\";\nconst ImportCSV = async () => {\n  // add csv uploader\n  /*#__PURE__*/_jsxDEV(Importer, {\n    chunkSize: 10000 // optional, internal parsing chunk size in bytes\n    ,\n    assumeNoHeaders: false // optional, keeps \"data has headers\" checkbox off by default\n    ,\n    restartable: true // optional, lets user choose to upload another file when import is complete\n    ,\n    processChunk: async rows => {\n      for (let row of rows) {\n        await updateDB(row);\n        // console.log(row)\n      }\n    },\n\n    onComplete: _ref => {\n      let {\n        file,\n        fields\n      } = _ref;\n      return (\n        // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n        showToastNotification(file, fields)\n      );\n    },\n    onClose: () => {\n      goToNextPage();\n    }\n    // CSV options passed directly to PapaParse if specified:\n    // delimiter={...}\n    // newline={...}\n    // quoteChar={...}\n    // escapeChar={...}\n    // comments=\"test\"\n    // skipEmptyLines={...}\n    // delimitersToGuess={...}\n    ,\n    children: importedField.map((_ref2, idx) => {\n      let {\n        name,\n        label,\n        optional\n      } = _ref2;\n      return optional ? /*#__PURE__*/_jsxDEV(ImporterField, {\n        name: name,\n        label: label,\n        optional: true\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(ImporterField, {\n        name: name,\n        label: label\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n  const data = fixture; //fileUpload;\n  console.log(data);\n  const handleSubmit = async () => {\n    try {\n      const result = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (result.ok) {\n        console.log(result);\n      } else {\n        throw new Error();\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n_c = ImportCSV;\nexport default ImportCSV;\nvar _c;\n$RefreshReg$(_c, \"ImportCSV\");","map":{"version":3,"names":["React","useState","fixture","Importer","ImporterField","apiUrl","ImportCSV","rows","row","updateDB","file","fields","showToastNotification","goToNextPage","importedField","map","idx","name","label","optional","data","console","log","handleSubmit","result","fetch","method","headers","body","JSON","stringify","ok","Error","e"],"sources":["/Users/shalks/Documents/dev/alphafx-csv-upload/src/pages/ImportCSV.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { fixture } from '../test/fixture.js';\nimport { Importer, ImporterField } from 'react-csv-importer'\n// const apiUrl = \"https://run.mocky.io/v3/cbca762d-3f84-4ae4-bb26-79fa774a6c72\";\nconst apiUrl = \"\";\n\n\nconst ImportCSV = async () => {\n\n\n    // add csv uploader\n    <Importer\n\t\t\t\tchunkSize={10000} // optional, internal parsing chunk size in bytes\n\t\t\t\tassumeNoHeaders={false} // optional, keeps \"data has headers\" checkbox off by default\n\t\t\t\trestartable={true} // optional, lets user choose to upload another file when import is complete\n\t\t\t\tprocessChunk={async rows => {\n\t\t\t\t\tfor (let row of rows) {\n\t\t\t\t\t\tawait updateDB(row)\n\t\t\t\t\t\t// console.log(row)\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonComplete={({ file, fields }) =>\n\t\t\t\t\t// optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n\t\t\t\t\tshowToastNotification(file, fields)\n\t\t\t\t}\n\t\t\t\tonClose={() => {\n\t\t\t\t\tgoToNextPage()\n\t\t\t\t}}\n\t\t\t\t// CSV options passed directly to PapaParse if specified:\n\t\t\t\t// delimiter={...}\n\t\t\t\t// newline={...}\n\t\t\t\t// quoteChar={...}\n\t\t\t\t// escapeChar={...}\n\t\t\t\t// comments=\"test\"\n\t\t\t\t// skipEmptyLines={...}\n\t\t\t\t// delimitersToGuess={...}\n\t\t\t>\n\t\t\t\t{importedField.map(({ name, label, optional }, idx) =>\n\t\t\t\t\toptional ? (\n\t\t\t\t\t\t<ImporterField key={idx} name={name} label={label} optional />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ImporterField key={idx} name={name} label={label} />\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</Importer>\n    \n    const data = fixture;//fileUpload;\n    console.log(data);\n    \n    \n    const handleSubmit = async () => {\n        try {\n            const result = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n\n            if (result.ok) {\n                console.log(result);\n            } else {\n                throw new Error();\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n};\n\nexport default ImportCSV;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,QAAQ,EAAEC,aAAa,QAAQ,oBAAoB;AAC5D;AAAA;AACA,MAAMC,MAAM,GAAG,EAAE;AAGjB,MAAMC,SAAS,GAAG,YAAY;EAG1B;EACA,qBAAC,QAAQ;IACT,SAAS,EAAE,KAAM,CAAC;IAAA;IAClB,eAAe,EAAE,KAAM,CAAC;IAAA;IACxB,WAAW,EAAE,IAAK,CAAC;IAAA;IACnB,YAAY,EAAE,MAAMC,IAAI,IAAI;MAC3B,KAAK,IAAIC,GAAG,IAAID,IAAI,EAAE;QACrB,MAAME,QAAQ,CAACD,GAAG,CAAC;QACnB;MACD;IACD,CAAE;;IACF,UAAU,EAAE;MAAA,IAAC;QAAEE,IAAI;QAAEC;MAAO,CAAC;MAAA;QAC5B;QACAC,qBAAqB,CAACF,IAAI,EAAEC,MAAM;MAAC;IAAA,CACnC;IACD,OAAO,EAAE,MAAM;MACdE,YAAY,EAAE;IACf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA;IAAA,UAECC,aAAa,CAACC,GAAG,CAAC,QAA4BC,GAAG;MAAA,IAA9B;QAAEC,IAAI;QAAEC,KAAK;QAAEC;MAAS,CAAC;MAAA,OAC5CA,QAAQ,gBACP,QAAC,aAAa;QAAW,IAAI,EAAEF,IAAK;QAAC,KAAK,EAAEC,KAAM;QAAC,QAAQ;MAAA,GAAvCF,GAAG;QAAA;QAAA;QAAA;MAAA,QAAuC,gBAE9D,QAAC,aAAa;QAAW,IAAI,EAAEC,IAAK;QAAC,KAAK,EAAEC;MAAM,GAA9BF,GAAG;QAAA;QAAA;QAAA;MAAA,QACvB;IAAA;EACD;IAAA;IAAA;IAAA;EAAA,QACS;EAEV,MAAMI,IAAI,GAAGlB,OAAO,CAAC;EACrBmB,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAGjB,MAAMG,YAAY,GAAG,YAAY;IAC7B,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAACpB,MAAM,EAAE;QAC/BqB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI;MAC7B,CAAC,CAAC;MAEF,IAAII,MAAM,CAACO,EAAE,EAAE;QACXV,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;MACvB,CAAC,MAAM;QACH,MAAM,IAAIQ,KAAK,EAAE;MACrB;IACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRZ,OAAO,CAACC,GAAG,CAACW,CAAC,CAAC;IAClB;EACJ,CAAC;AAEL,CAAC;AAAC,KA/DI3B,SAAS;AAiEf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}