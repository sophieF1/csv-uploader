{"ast":null,"code":"var _jsxFileName = \"/Users/shalks/Documents/dev/alphafx-csv-upload/src/pages/ImportCSV.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { fixture } from '../test/fixture.js';\nimport { Importer, ImporterField } from 'react-csv-importer';\n// const apiUrl = \"https://run.mocky.io/v3/cbca762d-3f84-4ae4-bb26-79fa774a6c72\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = \"\";\nconst field = [{\n  name: 'Beneficiary ID',\n  label: 'BenID',\n  optional: false\n}, {\n  name: 'Payment Currency',\n  label: 'currency',\n  optional: false\n}, {\n  name: 'Payment Amount',\n  label: 'amount',\n  optional: false\n}, {\n  name: 'Payment Reference',\n  label: 'ref',\n  optional: false\n}];\nconst ImportCSV = async () => {\n  _s();\n  const [notification, setNotification] = useState({\n    open: false,\n    vertical: 'top',\n    horizontal: 'right',\n    severity: 'success',\n    message: ''\n  });\n  const showToastNotification = (file, fields) => {\n    setNotification({\n      ...notification,\n      open: true,\n      message: `Le fichier ${file.name} a bien été importé.`\n    });\n  };\n\n  // add csv importer\n  /*#__PURE__*/_jsxDEV(Importer, {\n    chunkSize: 10000 // optional, internal parsing chunk size in bytes\n    ,\n    assumeNoHeaders: false // optional, keeps \"data has headers\" checkbox off by default\n    ,\n    restartable: true // optional, lets user choose to upload another file when import is complete\n    ,\n    processChunk: async rows => {\n      for (let row of rows) {\n        console.log(row);\n      }\n    },\n    onComplete: _ref => {\n      let {\n        file,\n        fields\n      } = _ref;\n      return (\n        // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n        showToastNotification(file, fields)\n      );\n    }\n    // onClose={() => {\n    // \tgoToNextPage()\n    // }}\n    // CSV options passed directly to PapaParse if specified:\n    // delimiter={...}\n    // newline={...}\n    // quoteChar={...}\n    // escapeChar={...}\n    // comments=\"test\"\n    // skipEmptyLines={...}\n    // delimitersToGuess={...}\n    ,\n    children: field.map((_ref2, idx) => {\n      let {\n        name,\n        label,\n        optional\n      } = _ref2;\n      return optional ? /*#__PURE__*/_jsxDEV(ImporterField, {\n        name: name,\n        label: label,\n        optional: true\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ImporterField, {\n        name: name,\n        label: label\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n  const data = fixture; //fileUpload;\n  console.log(data);\n  const handleSubmit = async () => {\n    try {\n      const result = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (result.ok) {\n        console.log(result);\n      } else {\n        throw new Error();\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n_s(ImportCSV, \"2mCLgbaPWm8F1WUC+3g6XDChxsU=\");\n_c = ImportCSV;\nexport default ImportCSV;\nvar _c;\n$RefreshReg$(_c, \"ImportCSV\");","map":{"version":3,"names":["React","useState","fixture","Importer","ImporterField","apiUrl","field","name","label","optional","ImportCSV","notification","setNotification","open","vertical","horizontal","severity","message","showToastNotification","file","fields","rows","row","console","log","map","idx","data","handleSubmit","result","fetch","method","headers","body","JSON","stringify","ok","Error","e"],"sources":["/Users/shalks/Documents/dev/alphafx-csv-upload/src/pages/ImportCSV.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { fixture } from '../test/fixture.js';\nimport { Importer, ImporterField } from 'react-csv-importer'\n// const apiUrl = \"https://run.mocky.io/v3/cbca762d-3f84-4ae4-bb26-79fa774a6c72\";\nconst apiUrl = \"\";\n\nconst field = [\n    {\n        name: 'Beneficiary ID',\n        label: 'BenID',\n        optional: false\n    },\n    {\n        name: 'Payment Currency',\n        label: 'currency',\n        optional: false\n    },\n    {\n        name: 'Payment Amount',\n        label: 'amount',\n        optional: false\n    },\n    {\n        name: 'Payment Reference',\n        label: 'ref',\n        optional: false\n    },\n];\n\n\nconst ImportCSV = async () => {\n    const [notification, setNotification] = useState({\n        open: false,\n        vertical: 'top',\n        horizontal: 'right',\n        severity: 'success',\n        message: ''\n    })\n\n    const showToastNotification = (file, fields) => {\n        setNotification({\n            ...notification,\n            open: true,\n            message: `Le fichier ${file.name} a bien été importé.`\n        })\n    }\n\n\n    // add csv importer\n    <Importer\n        chunkSize={10000} // optional, internal parsing chunk size in bytes\n        assumeNoHeaders={false} // optional, keeps \"data has headers\" checkbox off by default\n        restartable={true} // optional, lets user choose to upload another file when import is complete\n        processChunk={async rows => {\n            for (let row of rows) {\n                console.log(row)\n            }\n        }}\n        onComplete={({ file, fields }) =>\n            // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n            showToastNotification(file, fields)\n        }\n    // onClose={() => {\n    // \tgoToNextPage()\n    // }}\n    // CSV options passed directly to PapaParse if specified:\n    // delimiter={...}\n    // newline={...}\n    // quoteChar={...}\n    // escapeChar={...}\n    // comments=\"test\"\n    // skipEmptyLines={...}\n    // delimitersToGuess={...}\n    >\n        {field.map(({ name, label, optional }, idx) =>\n            optional ? (\n                <ImporterField key={idx} name={name} label={label} optional />\n            ) : (\n                <ImporterField key={idx} name={name} label={label} />\n            )\n        )}\n    </Importer>\n\n    const data = fixture;//fileUpload;\n    console.log(data);\n\n\n    const handleSubmit = async () => {\n        try {\n            const result = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n\n            if (result.ok) {\n                console.log(result);\n            } else {\n                throw new Error();\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n};\n\nexport default ImportCSV;"],"mappings":"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"},"metadata":{},"sourceType":"module"}