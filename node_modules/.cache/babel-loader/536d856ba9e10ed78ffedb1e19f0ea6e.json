{"ast":null,"code":"var _jsxFileName = \"/Users/shalks/Documents/dev/alphafx-csv-upload/src/pages/HomePage.js\";\nimport ImportCSV from \"./ImportCSV\";\nimport { fixture } from '../test/fixture.js';\n// const apiUrl = \"https://run.mocky.io/v3/cbca762d-3f84-4ae4-bb26-79fa774a6c72\";\nconst apiUrl = \"\";\nimport { Importer, ImporterField } from 'react-csv-importer';\n\n// include the widget CSS file whichever way your bundler supports it\nimport 'react-csv-importer/dist/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  const data = fixture; //fileUpload;\n  console.log(data);\n  const handleSubmit = async () => {\n    try {\n      const result = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (result.ok) {\n        console.log(result);\n      } else {\n        throw new Error();\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Hello World\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Importer, {\n        assumeNoHeaders: false // optional, keeps \"data has headers\" checkbox off by default\n        ,\n        restartable: false // optional, lets user choose to upload another file when import is complete\n        ,\n        onStart: _ref => {\n          let {\n            file,\n            preview,\n            fields,\n            columnFields\n          } = _ref;\n          // optional, invoked when user has mapped columns and started import\n          prepMyAppForIncomingData();\n        },\n        processChunk: async (rows, _ref2) => {\n          let {\n            startIndex\n          } = _ref2;\n          // required, may be called several times\n          // receives a list of parsed objects based on defined fields and user column mapping;\n          // (if this callback returns a promise, the widget will wait for it before parsing more data)\n          for (row of rows) {\n            await myAppMethod(row);\n          }\n        },\n        onComplete: _ref3 => {\n          let {\n            file,\n            preview,\n            fields,\n            columnFields\n          } = _ref3;\n          // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n          showMyAppToastNotification();\n        },\n        onClose: _ref4 => {\n          let {\n            file,\n            preview,\n            fields,\n            columnFields\n          } = _ref4;\n          // optional, if this is specified the user will see a \"Finish\" button after import is done,\n          // which will call this when clicked\n          goToMyAppNextPage();\n        }\n\n        // CSV options passed directly to PapaParse if specified:\n        // delimiter={...}\n        // newline={...}\n        // quoteChar={...}\n        // escapeChar={...}\n        // comments={...}\n        // skipEmptyLines={...}\n        // delimitersToGuess={...}\n        // chunkSize={...} // defaults to 10000\n        // encoding={...} // defaults to utf-8, see FileReader API\n        ,\n        children: [/*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"name\",\n          label: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"email\",\n          label: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"dob\",\n          label: \"Date of Birth\",\n          optional: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"postalCode\",\n          label: \"Postal Code\",\n          optional: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), \";\", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Transfert ajout\\xE9 : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Transfert mis \\xE0 jour : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Transfert total r\\xE9ussi : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Transfert \\xC9chou\\xE9: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["ImportCSV","fixture","apiUrl","Importer","ImporterField","HomePage","data","console","log","handleSubmit","result","fetch","method","headers","body","JSON","stringify","ok","Error","e","file","preview","fields","columnFields","prepMyAppForIncomingData","rows","startIndex","row","myAppMethod","showMyAppToastNotification","goToMyAppNextPage"],"sources":["/Users/shalks/Documents/dev/alphafx-csv-upload/src/pages/HomePage.js"],"sourcesContent":["import ImportCSV from \"./ImportCSV\";\nimport { fixture } from '../test/fixture.js';\n// const apiUrl = \"https://run.mocky.io/v3/cbca762d-3f84-4ae4-bb26-79fa774a6c72\";\nconst apiUrl = \"\";\nimport { Importer, ImporterField } from 'react-csv-importer';\n\n// include the widget CSS file whichever way your bundler supports it\nimport 'react-csv-importer/dist/index.css';\n\nconst HomePage = () => {\n    \n    \n    const data = fixture;//fileUpload;\n    console.log(data);\n\n\n    const handleSubmit = async () => {\n        try {\n            const result = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n\n            if (result.ok) {\n                console.log(result);\n            } else {\n                throw new Error();\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n\t\t<>\n\t\t\t<div className=\"row\">\n\t\t\t\t<div>\n\t\t\t\t\t<h4>Hello World</h4>\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{(\n\t\t\t\t<>\n\t\t\t\t\t{/* <ImportCSV  /> */}\n                    <Importer\n  assumeNoHeaders={false} // optional, keeps \"data has headers\" checkbox off by default\n  restartable={false} // optional, lets user choose to upload another file when import is complete\n  onStart={({ file, preview, fields, columnFields }) => {\n    // optional, invoked when user has mapped columns and started import\n    prepMyAppForIncomingData();\n  }}\n  processChunk={async (rows, { startIndex }) => {\n    // required, may be called several times\n    // receives a list of parsed objects based on defined fields and user column mapping;\n    // (if this callback returns a promise, the widget will wait for it before parsing more data)\n    for (row of rows) {\n      await myAppMethod(row);\n    }\n  }}\n  onComplete={({ file, preview, fields, columnFields }) => {\n    // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n    showMyAppToastNotification();\n  }}\n  onClose={({ file, preview, fields, columnFields }) => {\n    // optional, if this is specified the user will see a \"Finish\" button after import is done,\n    // which will call this when clicked\n    goToMyAppNextPage();\n  }}\n\n  // CSV options passed directly to PapaParse if specified:\n  // delimiter={...}\n  // newline={...}\n  // quoteChar={...}\n  // escapeChar={...}\n  // comments={...}\n  // skipEmptyLines={...}\n  // delimitersToGuess={...}\n  // chunkSize={...} // defaults to 10000\n  // encoding={...} // defaults to utf-8, see FileReader API\n>\n  <ImporterField name=\"name\" label=\"Name\" />\n  <ImporterField name=\"email\" label=\"Email\" />\n  <ImporterField name=\"dob\" label=\"Date of Birth\" optional />\n  <ImporterField name=\"postalCode\" label=\"Postal Code\" optional />\n</Importer>;\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Transfert ajouté : </p>\n\t\t\t\t\t\t<p>Transfert mis à jour : </p>\n\t\t\t\t\t\t<p>Transfert total réussi : </p>\n\t\t\t\t\t\t<p>Transfert Échoué: </p>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t)\n};\n\nexport default HomePage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}