{"ast":null,"code":"var _jsxFileName = \"/Users/shalks/Documents/dev/alphafx-csv-upload/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { Importer, ImporterField } from 'react-csv-importer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Importer, {\n        assumeNoHeaders: false // optional, keeps \"data has headers\" checkbox off by default\n        ,\n        restartable: false // optional, lets user choose to upload another file when import is complete\n        ,\n\n        processChunk: async (rows, _ref) => {\n          let {\n            startIndex\n          } = _ref;\n          // required, may be called several times\n          // receives a list of parsed objects based on defined fields and user column mapping;\n          // (if this callback returns a promise, the widget will wait for it before parsing more data)\n          for (row of rows) {\n            await myAppMethod(row);\n          }\n        },\n        onComplete: _ref2 => {\n          let {\n            file,\n            preview,\n            fields,\n            columnFields\n          } = _ref2;\n          // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n          showMyAppToastNotification();\n        },\n        onClose: _ref3 => {\n          let {\n            file,\n            preview,\n            fields,\n            columnFields\n          } = _ref3;\n          // optional, if this is specified the user will see a \"Finish\" button after import is done,\n          // which will call this when clicked\n          goToMyAppNextPage();\n        }\n\n        // CSV options passed directly to PapaParse if specified:\n        // delimiter={...}\n        // newline={...}\n        // quoteChar={...}\n        // escapeChar={...}\n        // comments={...}\n        // skipEmptyLines={...}\n        // delimitersToGuess={...}\n        // chunkSize={...} // defaults to 10000\n        // encoding={...} // defaults to utf-8, see FileReader API\n        ,\n        children: [/*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"name\",\n          label: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"email\",\n          label: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"dob\",\n          label: \"Date of Birth\",\n          optional: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(ImporterField, {\n          name: \"postalCode\",\n          label: \"Postal Code\",\n          optional: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Importer","ImporterField","App","rows","startIndex","row","myAppMethod","file","preview","fields","columnFields","showMyAppToastNotification","goToMyAppNextPage"],"sources":["/Users/shalks/Documents/dev/alphafx-csv-upload/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { Importer, ImporterField } from 'react-csv-importer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <div>\n      {/* File Uploader */}\n  \n      <Importer\n  assumeNoHeaders={false} // optional, keeps \"data has headers\" checkbox off by default\n  restartable={false} // optional, lets user choose to upload another file when import is complete\n \n  processChunk={async (rows, { startIndex }) => {\n    // required, may be called several times\n    // receives a list of parsed objects based on defined fields and user column mapping;\n    // (if this callback returns a promise, the widget will wait for it before parsing more data)\n    for (row of rows) {\n      await myAppMethod(row);\n    }\n  }}\n  onComplete={({ file, preview, fields, columnFields }) => {\n    // optional, invoked right after import is done (but user did not dismiss/reset the widget yet)\n    showMyAppToastNotification();\n  }}\n  onClose={({ file, preview, fields, columnFields }) => {\n    // optional, if this is specified the user will see a \"Finish\" button after import is done,\n    // which will call this when clicked\n    goToMyAppNextPage();\n  }}\n\n  // CSV options passed directly to PapaParse if specified:\n  // delimiter={...}\n  // newline={...}\n  // quoteChar={...}\n  // escapeChar={...}\n  // comments={...}\n  // skipEmptyLines={...}\n  // delimitersToGuess={...}\n  // chunkSize={...} // defaults to 10000\n  // encoding={...} // defaults to utf-8, see FileReader API\n>\n  <ImporterField name=\"name\" label=\"Name\" />\n  <ImporterField name=\"email\" label=\"Email\" />\n  <ImporterField name=\"dob\" label=\"Date of Birth\" optional />\n  <ImporterField name=\"postalCode\" label=\"Postal Code\" optional />\n</Importer>;\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,QAAQ,EAAEC,aAAa,QAAQ,oBAAoB;AAAC;AAE7D,SAASC,GAAG,GAAG;EACb,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBACnB;MAAA,wBAGC,QAAC,QAAQ;QACb,eAAe,EAAE,KAAM,CAAC;QAAA;QACxB,WAAW,EAAE,KAAM,CAAC;QAAA;;QAEpB,YAAY,EAAE,OAAOC,IAAI,WAAqB;UAAA,IAAnB;YAAEC;UAAW,CAAC;UACvC;UACA;UACA;UACA,KAAKC,GAAG,IAAIF,IAAI,EAAE;YAChB,MAAMG,WAAW,CAACD,GAAG,CAAC;UACxB;QACF,CAAE;QACF,UAAU,EAAE,SAA6C;UAAA,IAA5C;YAAEE,IAAI;YAAEC,OAAO;YAAEC,MAAM;YAAEC;UAAa,CAAC;UAClD;UACAC,0BAA0B,EAAE;QAC9B,CAAE;QACF,OAAO,EAAE,SAA6C;UAAA,IAA5C;YAAEJ,IAAI;YAAEC,OAAO;YAAEC,MAAM;YAAEC;UAAa,CAAC;UAC/C;UACA;UACAE,iBAAiB,EAAE;QACrB;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAAA;QAAA,wBAEA,QAAC,aAAa;UAAC,IAAI,EAAC,MAAM;UAAC,KAAK,EAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG,eAC1C,QAAC,aAAa;UAAC,IAAI,EAAC,OAAO;UAAC,KAAK,EAAC;QAAO;UAAA;UAAA;UAAA;QAAA,QAAG,eAC5C,QAAC,aAAa;UAAC,IAAI,EAAC,KAAK;UAAC,KAAK,EAAC,eAAe;UAAC,QAAQ;QAAA;UAAA;UAAA;UAAA;QAAA,QAAG,eAC3D,QAAC,aAAa;UAAC,IAAI,EAAC,YAAY;UAAC,KAAK,EAAC,aAAa;UAAC,QAAQ;QAAA;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QACvD;IAAA;MAAA;MAAA;MAAA;IAAA;EACD;IAAA;IAAA;IAAA;EAAA,QACA;AAEV;AAAC,KA/CQV,GAAG;AAiDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}