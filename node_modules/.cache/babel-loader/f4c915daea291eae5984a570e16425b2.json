{"ast":null,"code":"import namor from 'namor';\nconst range = len => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst newPerson = () => {\n  const statusChance = Math.random();\n  return {\n    firstName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    lastName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status: statusChance > 0.66 ? 'relationship' : statusChance > 0.33 ? 'complicated' : 'single'\n  };\n};\nexport default function makeData() {\n  for (var _len = arguments.length, lens = new Array(_len), _key = 0; _key < _len; _key++) {\n    lens[_key] = arguments[_key];\n  }\n  const makeDataLevel = function () {\n    let depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const len = lens[depth];\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n  return makeDataLevel();\n}","map":{"version":3,"names":["namor","range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","generate","words","numbers","lastName","age","floor","visits","progress","status","makeData","lens","makeDataLevel","depth","map","d","subRows","undefined"],"sources":["/Users/shalks/Documents/dev/alphafx-csv-upload/src/pages/makeData.js"],"sourcesContent":["import namor from 'namor'\n\nconst range = len => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst newPerson = () => {\n  const statusChance = Math.random()\n  return {\n    firstName: namor.generate({ words: 1, numbers: 0 }),\n    lastName: namor.generate({ words: 1, numbers: 0 }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status:\n      statusChance > 0.66\n        ? 'relationship'\n        : statusChance > 0.33\n        ? 'complicated'\n        : 'single',\n  }\n}\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth]\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,KAAK,GAAGC,GAAG,IAAI;EACnB,MAAMC,GAAG,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC5BD,GAAG,CAACE,IAAI,CAACD,CAAC,CAAC;EACb;EACA,OAAOD,GAAG;AACZ,CAAC;AAED,MAAMG,SAAS,GAAG,MAAM;EACtB,MAAMC,YAAY,GAAGC,IAAI,CAACC,MAAM,EAAE;EAClC,OAAO;IACLC,SAAS,EAAEV,KAAK,CAACW,QAAQ,CAAC;MAAEC,KAAK,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC,CAAC;IACnDC,QAAQ,EAAEd,KAAK,CAACW,QAAQ,CAAC;MAAEC,KAAK,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC,CAAC;IAClDE,GAAG,EAAEP,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,CAAC;IACnCQ,MAAM,EAAET,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;IACvCS,QAAQ,EAAEV,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;IACzCU,MAAM,EACJZ,YAAY,GAAG,IAAI,GACf,cAAc,GACdA,YAAY,GAAG,IAAI,GACnB,aAAa,GACb;EACR,CAAC;AACH,CAAC;AAED,eAAe,SAASa,QAAQ,GAAU;EAAA,kCAANC,IAAI;IAAJA,IAAI;EAAA;EACtC,MAAMC,aAAa,GAAG,YAAe;IAAA,IAAdC,KAAK,uEAAG,CAAC;IAC9B,MAAMrB,GAAG,GAAGmB,IAAI,CAACE,KAAK,CAAC;IACvB,OAAOtB,KAAK,CAACC,GAAG,CAAC,CAACsB,GAAG,CAACC,CAAC,IAAI;MACzB,OAAO;QACL,GAAGnB,SAAS,EAAE;QACdoB,OAAO,EAAEL,IAAI,CAACE,KAAK,GAAG,CAAC,CAAC,GAAGD,aAAa,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGI;MACxD,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,OAAOL,aAAa,EAAE;AACxB"},"metadata":{},"sourceType":"module"}